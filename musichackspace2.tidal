-- Potential topics

-- Syntax - $ and #, etc
-- Sequencing (polymeter, euclidean rhythms, ..)
-- Effects
-- Granulation (chop, striate, gap etc)
-- Chords and scales <- dev version of tidal
-- Transforming pattern (iter, off, rev, weave, fast/slow, ..)
-- Higher order transformation (every, jux)
-- Randomisation
-- Superdirt hacks
--   orbit
-- History of tidal / algorave etc
-- How to make an algorave


-- Find this file (musichackspace2.tidal)
https://github.com/yaxu/tidal-workshop

-- install the development version of tidal
cabal install https://hackage.haskell.org/package/tidal-0.9.5/candidate/tidal-0.9.5.tar.gz

-- if you use midi you'll probably need to update that too
cabal install https://hackage.haskell.org/package/tidal-midi-0.9.4/candidate/tidal-midi-0.9.4.tar.gz

-- Sequencing

d1 $ sound "bd sd cp sd"

-- Silencing

d1 $ silence

hush

-- The longer the sequence, the faster it runs

d1 $ sound "bd(7,16)"

d1 $ sound "bd ~ ~ bd ~ bd ~ ~"

d1 $ sound "bd*3 bd bd*8 bd"

d1 $ sound "bd bd? sd*2 bd(3,8)"

-- Euclidean rhythms

d1 $ sound "bd(3,8)"

(2,5) : A thirteenth century Persian rhythm called Khafif-e-ramal.
(3,4) : The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.
(3,5,2) : Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.
(3,7) : A Ruchenitza rhythm used in a Bulgarian folk-dance.
(3,8) : The Cuban tresillo pattern.
(4,7) : Another Ruchenitza Bulgarian folk-dance rhythm.
(4,9) : The Aksak rhythm of Turkey.
(4,11) : The metric pattern used by Frank Zappa in his piece titled Outside Now.
(5,6) : Yields the York-Samai pattern, a popular Arab rhythm.
(5,7) : The Nawakhat pattern, another popular Arab rhythm.
(5,8) : The Cuban cinquillo pattern.
(5,9) : A popular Arab rhythm called Agsag-Samai.
(5,11) : The metric pattern used by Moussorgsky in Pictures at an Exhibition.
(5,12) : The Venda clapping pattern of a South African childrenâ€™s song.
(5,16) : The Bossa-Nova rhythm necklace of Brazil.
(7,8) : A typical rhythm played on the Bendir (frame drum).
(7,12) : A common West African bell pattern.
(7,16,14) : A Samba rhythm necklace from Brazil.
(9,16) : A rhythm necklace used in the Central African Republic.
(11,24,14) : A rhythm necklace of the Aka Pygmies of Central Africa.
(13,24,5) : Another rhythm necklace of the Aka Pygmies of the upper Sangha.

-- Add gaps

d1 $ sound "bd ~ hh bd sd ~ hh bd"

-- Pick from a sampleset

d1 $ sound "arpy arpy:4 arpy:5"

-- Where do these sounds come from?

-- In the menus in SuperCollider (not atom):
-- - File > Open user support directory > downloaded-quarks > Dirt-Samples

-- How do I add more sounds? Here's some..
http://slab.org/tmp/extra-samples.zip

-- Change the superdirt startup, instructions here:
https://github.com/musikinformatik/SuperDirt

-- Composing effects

d1 $ sound "bd sd cp sd"
   # vowel "a e"

-- All the effects:
https://tidalcycles.org/functions.html#synth_parameters

-- Types

:t (+)
:t slow
:t fast
:t sound
:t (#)
:t ($)

-- Lets look at slow

slow :: Pattern Time -> Pattern a -> Pattern a

-- Slow takes a pattern of time, a pattern (of something) and results in a pattern (of that something)

d1 $ slow 2 (sound "arpy arpy:2")

-- We have to wrap that last pattern in brackets so that it gets passed as the second parameter of `slow`.

-- Instead we can do this:

d1 $ slow 2 $ sound "arpy arpy:2"

-- The $ means 'pass everything on the right, to the function on the
-- left'. It saves having to remember to put the closing bracket in.
-- `d1` is a function as well, which takes exactly one pattern, which
-- it sends to the synthesiser. We could do this instead:

d1 (slow 2 (sound "arpy arpy:2"))

-- .. but we'd quickly end up with a lot of closing brackets to keep
-- track of.

-- Earlier we noticed that the first parameter was a *pattern* of
-- time. This means we can pattern it:

d1 $ slow "2 0.5" $ sound "arpy arpy:2"

-- There are a lot of patterns in the above! Lets look at the bits.

-- This is a pattern of words (also known as 'strings'):
"arpy arpy:2"

-- This is a pattern of names of sounds:
sound "arpy arpy:2"

-- This is a pattern of whole numbers (also known as 'integers'):
"2 4"

-- This isn't actually a pattern, but a function that takes a pattern as input, and returns a slowed down pattern
slow "2 4"

-- This isn't a pattern either, but a strange little function that
-- takes everything on the right and gives it to the function on the
-- left:
$

-- But it together and you get a pattern again, a pattern of sounds
slow "2 4" $ sound "arpy arpy:2"

-- This is also a function, that takes a pattern as input and starts
-- sending it off to the synthesiser to be turned into sound.
d1

-- There's another one of these dollars to take everything on the right and pass it to d1
$

-- And the whole thing, which is an action to change what is being sent to the synthesiser
d1 $ slow "2 4" $ sound "arpy arpy:2"

-- Functions like "slow" will work on any pattern. We could have
-- slowed down the pattern of words rather than the pattern of sounds:
d2 $ off 0.25 (# speed 2) $ sound (slow "2 4" "arpy(3,8) arpy:2")
 # crush 3

d1 $ off 0.25 (# crush 3) $

-- Playing long samples

-- legato

-- loopAt

-- Granular Synthesis

-- every

-- off

-- sometimes

-- hurry

-- vis

brew install cairo
brew install pkg-config
git clone https://github.com/tidalcycles/tidal-vis.git
cd tidal-vis
cabal install

import Sound.Tidal.Vis

import Sound.Tidal.VisCycle

import qualified Graphics.Rendering.Cairo as C

let vis name pat = vLines (C.withSVGSurface) (name ++ ".svg") (600,50) pat 1 1

vis "test" $ "red blue green orange"

visCycle "testcycle" "" "red blue green orange"

-- Superdirt

https://github.com/musikinformatik/SuperDirt
https://github.com/musikinformatik/SuperDirt/tree/master/hacks

-- Global effects + orbits

-- Normally if you set a global effect like reverb on one pattern,
-- it'll mess up other patterns.. Unless you put them in different
-- 'orbits'

d1 $ sound "bd"
  # room 0.9
  # size 0.9
  # orbit 1

  -- quadrophonic, five orbits

(
// configure the sound server: here you could add hardware specific options
// see http://doc.sccode.org/Classes/ServerOptions.html
s.options.numBuffers = 1024 * 16; // increase this if you need to load more samples
s.options.memSize = 8192 * 16; // increase this if you get "alloc failed" messages
s.options.maxNodes = 1024 * 32; // increase this if you are getting drop outs and the message "too many nodes"
s.options.numOutputBusChannels = 4; // set this to your hardware output channel size, if necessary
s.options.numInputBusChannels = 2; // set this to your hardware input channel size, if necessary
// boot the server and start SuperDirt
s.waitForBoot {
	~dirt = SuperDirt(4, s); // two output channels, increase if you want to pan across more channels
	~dirt.loadSoundFiles;   // load samples (path containing a wildcard can be passed in)
	~dirt.loadSoundFiles("/home/alex/extra-samples/*");

	s.sync; // wait for samples to be read
	~dirt.start(57120, [0, 0, 0, 0, 0]);   // start listening on port 57120, create two orbits, each sending audio to channel 0. You can direct sounds to the orbits from tidal e.g. by: `# orbit "0 1 1"
}
)

-- eight stereo channels, going to eight tracks on a DAW (via soundflower or something)

(
// configure the sound server: here you could add hardware specific options
// see http://doc.sccode.org/Classes/ServerOptions.html
s.options.numBuffers = 1024 * 16; // increase this if you need to load more samples
s.options.memSize = 8192 * 16; // increase this if you get "alloc failed" messages
s.options.maxNodes = 1024 * 32; // increase this if you are getting drop outs and the message "too many nodes"
s.options.numOutputBusChannels = 16; // set this to your hardware output channel size, if necessary
s.options.numInputBusChannels = 2; // set this to your hardware input channel size, if necessary
// boot the server and start SuperDirt
s.waitForBoot {
	~dirt = SuperDirt(2, s); // two output channels, increase if you want to pan across more channels
	~dirt.loadSoundFiles;   // load samples (path containing a wildcard can be passed in)
	~dirt.loadSoundFiles("/home/alex/extra-samples/*");

	s.sync; // wait for samples to be read
	~dirt.start(57120, [0, 2, 4, 6, 8, 10, 12, 14]);   // start listening on port 57120, create two orbits, each sending audio to channel 0. You can direct sounds to the orbits from tidal e.g. by: `# orbit "0 1 1"
}
)

-- stereo, six orbits

(
// configure the sound server: here you could add hardware specific options
// see http://doc.sccode.org/Classes/ServerOptions.html
s.options.numBuffers = 1024 * 16; // increase this if you need to load more samples
s.options.memSize = 8192 * 16; // increase this if you get "alloc failed" messages
s.options.maxNodes = 1024 * 32; // increase this if you are getting drop outs and the message "too many nodes"
s.options.numOutputBusChannels = 2; // set this to your hardware output channel size, if necessary
s.options.numInputBusChannels = 2; // set this to your hardware input channel size, if necessary
// boot the server and start SuperDirt
s.waitForBoot {
	~dirt = SuperDirt(2, s); // two output channels, increase if you want to pan across more channels
	~dirt.loadSoundFiles;   // load samples (path containing a wildcard can be passed in)
	~dirt.loadSoundFiles("/home/alex/extra-samples/*");

	s.sync; // wait for samples to be read
	~dirt.start(57120, [0,0,0,0,0,0]);   // start listening on port 57120, create two orbits, each sending audio to channel 0. You can direct sounds to the orbits from tidal e.g. by: `# orbit "0 1 1"
}
)

-- install TidaLink
mkdir src
cd src
git clone https://github.com/tidalcycles/TidaLink.git
cd TidaLink

-- You might need to do:
brew install cmake

/bin/bash compile.sh

-- to run TidaLink
cd build
./TidaLink

d1 $ fast 2 $ whenmod 8 6 (fast 4) $ sound "odx"
   # pan 0.25

d2 $ slow 2 $ sound "blue"
   # pan 0.25

